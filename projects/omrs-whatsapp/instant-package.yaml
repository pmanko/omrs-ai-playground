# Instant OpenHIE Package Configuration
# Place this in your Instant OpenHIE packages directory
# Deploy with: instant package init -p omrs-whatsapp && instant package up -p omrs-whatsapp

name: omrs-whatsapp
description: WhatsApp-OpenMRS-MedGemma Integration Service
version: 1.0.0
author: Your Organization

services:
  omrs-whatsapp:
    image: omrs-whatsapp:latest
    hostname: omrs-whatsapp
    container_name: omrs-whatsapp
    networks:
      - instant
    ports:
      - "8000:8000"
    environment:
      # WhatsApp Configuration
      WHATSAPP_API_KEY: ${WHATSAPP_API_KEY}
      WHATSAPP_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID}
      WHATSAPP_WEBHOOK_VERIFY_TOKEN: ${WHATSAPP_WEBHOOK_VERIFY_TOKEN}
      WHATSAPP_ACCESS_TOKEN: ${WHATSAPP_ACCESS_TOKEN}
      
      # Google MedGemma Configuration
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      MEDGEMMA_MODEL: gemini-1.5-flash
      
      # Service URLs - using Docker network service names
      OPENMRS_BASE_URL: http://openmrs:8080/openmrs/ws/fhir2/R4
      REDIS_URL: redis://redis:6379
      
      # OpenMRS Credentials
      OPENMRS_USERNAME: ${OPENMRS_USERNAME:-admin}
      OPENMRS_PASSWORD: ${OPENMRS_PASSWORD:-Admin123}
      
      # Service Configuration
      SERVICE_PORT: 8000
      SERVICE_HOST: 0.0.0.0
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      WEBHOOK_BASE_URL: ${WEBHOOK_BASE_URL}
      
    depends_on:
      - openmrs
      - redis
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Dependencies on other Instant OpenHIE packages
dependencies:
  - openmrs
  - redis