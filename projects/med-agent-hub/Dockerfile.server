# Multi-stage build for Multi-Agent Chat Server
# Stage 1: Poetry dependencies builder
FROM python:3.11-slim as builder

LABEL maintainer="Multi-Agent Chat Team"
LABEL stage="builder"

# Set working directory
WORKDIR /app

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry
ENV POETRY_VERSION=1.8.3 \
    POETRY_HOME=/opt/poetry \
    POETRY_VENV=/opt/poetry-venv \
    POETRY_NO_INTERACTION=1 \
    POETRY_VIRTUALENVS_CREATE=false

RUN python -m venv $POETRY_VENV \
    && $POETRY_VENV/bin/pip install --upgrade pip setuptools \
    && $POETRY_VENV/bin/pip install poetry==${POETRY_VERSION}

# Add Poetry to PATH
ENV PATH="${PATH}:${POETRY_VENV}/bin"

# Copy dependency files
COPY pyproject.toml poetry.lock ./

# Export requirements from Poetry, including optional extras needed in runtime
RUN poetry export -f requirements.txt --output requirements.txt --without-hashes --extras spark --extras duckdb

# Install dependencies to builder stage for wheel building
RUN pip install --user --no-cache-dir -r requirements.txt

# ============================================
# Stage 2: Runtime
FROM python:3.11-slim

LABEL maintainer="Multi-Agent Chat Team"
LABEL version="1.0"
LABEL description="Multi-Agent Medical Chat Server with A2A Protocol support"

# Create non-root user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set working directory
WORKDIR /app

# Install runtime system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy Python packages from builder into system site-packages and bin
# This avoids permission issues when running as non-root user
COPY --from=builder /root/.local /usr/local

# Copy requirements for reference
COPY --from=builder /app/requirements.txt .

# Ensure system-local bin is prioritized (uvicorn, etc.)
ENV PATH=/usr/local/bin:$PATH

# Copy application code
COPY server/ ./server/

# Create necessary directories
RUN mkdir -p logs data && \
    chown -R appuser:appuser /app

# Set Python options
ENV PYTHONUNBUFFERED=1

# Default environment variables (can be overridden)
ENV LLM_BASE_URL=http://localhost:1234 \
    LLM_TEMPERATURE=0.2 \
    ENABLE_A2A=true \
    ENABLE_A2A_NATIVE=false \
    CHAT_TIMEOUT_SECONDS=90

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Switch to non-root user
USER appuser

# Run the FastAPI application
CMD ["python", "-m", "uvicorn", "server.main:app", "--host", "0.0.0.0", "--port", "3000"]
